package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.SleepSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SLEEP_SESSION.
*/
public class SleepSessionDao extends AbstractDao<SleepSession, Long> {

    public static final String TABLENAME = "SLEEP_SESSION";

    /**
     * Properties of entity SleepSession.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Created_at = new Property(1, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Deep_sleep_duration = new Property(2, int.class, "deep_sleep_duration", false, "DEEP_SLEEP_DURATION");
        public final static Property Start = new Property(3, java.util.Date.class, "start", false, "START");
        public final static Property End = new Property(4, java.util.Date.class, "end", false, "END");
        public final static Property Sleep_duration = new Property(5, int.class, "sleep_duration", false, "SLEEP_DURATION");
        public final static Property Sleep_quality = new Property(6, int.class, "sleep_quality", false, "SLEEP_QUALITY");
    };

    private DaoSession daoSession;


    public SleepSessionDao(DaoConfig config) {
        super(config);
    }
    
    public SleepSessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SLEEP_SESSION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CREATED_AT' INTEGER NOT NULL ," + // 1: created_at
                "'DEEP_SLEEP_DURATION' INTEGER NOT NULL ," + // 2: deep_sleep_duration
                "'START' INTEGER NOT NULL ," + // 3: start
                "'END' INTEGER NOT NULL ," + // 4: end
                "'SLEEP_DURATION' INTEGER NOT NULL ," + // 5: sleep_duration
                "'SLEEP_QUALITY' INTEGER NOT NULL );"); // 6: sleep_quality
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SLEEP_SESSION_CREATED_AT ON SLEEP_SESSION" +
                " (CREATED_AT);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SLEEP_SESSION_START ON SLEEP_SESSION" +
                " (START);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SLEEP_SESSION_END ON SLEEP_SESSION" +
                " (END);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SLEEP_SESSION_SLEEP_QUALITY ON SLEEP_SESSION" +
                " (SLEEP_QUALITY);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SLEEP_SESSION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SleepSession entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCreated_at().getTime());
        stmt.bindLong(3, entity.getDeep_sleep_duration());
        stmt.bindLong(4, entity.getStart().getTime());
        stmt.bindLong(5, entity.getEnd().getTime());
        stmt.bindLong(6, entity.getSleep_duration());
        stmt.bindLong(7, entity.getSleep_quality());
    }

    @Override
    protected void attachEntity(SleepSession entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SleepSession readEntity(Cursor cursor, int offset) {
        SleepSession entity = new SleepSession( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // created_at
            cursor.getInt(offset + 2), // deep_sleep_duration
            new java.util.Date(cursor.getLong(offset + 3)), // start
            new java.util.Date(cursor.getLong(offset + 4)), // end
            cursor.getInt(offset + 5), // sleep_duration
            cursor.getInt(offset + 6) // sleep_quality
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SleepSession entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreated_at(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDeep_sleep_duration(cursor.getInt(offset + 2));
        entity.setStart(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEnd(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSleep_duration(cursor.getInt(offset + 5));
        entity.setSleep_quality(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SleepSession entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SleepSession entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
