package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SLEEP_SESSION.
 */
public class SleepSession {

    private Long id;
    /** Not-null value. */
    private java.util.Date created_at;
    private int deep_sleep_duration;
    /** Not-null value. */
    private java.util.Date start;
    /** Not-null value. */
    private java.util.Date end;
    private int sleep_duration;
    private int sleep_quality;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SleepSessionDao myDao;

    private List<SleepSessionPoint> childsSleepSessionPoint;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SleepSession() {
    }

    public SleepSession(Long id) {
        this.id = id;
    }

    public SleepSession(Long id, java.util.Date created_at, int deep_sleep_duration, java.util.Date start, java.util.Date end, int sleep_duration, int sleep_quality) {
        this.id = id;
        this.created_at = created_at;
        this.deep_sleep_duration = deep_sleep_duration;
        this.start = start;
        this.end = end;
        this.sleep_duration = sleep_duration;
        this.sleep_quality = sleep_quality;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSleepSessionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getCreated_at() {
        return created_at;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    public int getDeep_sleep_duration() {
        return deep_sleep_duration;
    }

    public void setDeep_sleep_duration(int deep_sleep_duration) {
        this.deep_sleep_duration = deep_sleep_duration;
    }

    /** Not-null value. */
    public java.util.Date getStart() {
        return start;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStart(java.util.Date start) {
        this.start = start;
    }

    /** Not-null value. */
    public java.util.Date getEnd() {
        return end;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEnd(java.util.Date end) {
        this.end = end;
    }

    public int getSleep_duration() {
        return sleep_duration;
    }

    public void setSleep_duration(int sleep_duration) {
        this.sleep_duration = sleep_duration;
    }

    public int getSleep_quality() {
        return sleep_quality;
    }

    public void setSleep_quality(int sleep_quality) {
        this.sleep_quality = sleep_quality;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SleepSessionPoint> getChildsSleepSessionPoint() {
        if (childsSleepSessionPoint == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SleepSessionPointDao targetDao = daoSession.getSleepSessionPointDao();
            List<SleepSessionPoint> childsSleepSessionPointNew = targetDao._querySleepSession_ChildsSleepSessionPoint(id);
            synchronized (this) {
                if(childsSleepSessionPoint == null) {
                    childsSleepSessionPoint = childsSleepSessionPointNew;
                }
            }
        }
        return childsSleepSessionPoint;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildsSleepSessionPoint() {
        childsSleepSessionPoint = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
