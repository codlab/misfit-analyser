package greendao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

import android.util.SparseArray;

import org.joda.time.DateTime;
import org.joda.time.MutableDateTime;

import java.util.Date;
import java.util.List;

/**
 * Entity mapped to table DAILY_ACTIVITY.
 */
public class DailyActivity {

    private Long id;
    private int date_uid;
    /**
     * Not-null value.
     */
    private java.util.Date date;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DailyActivity() {
    }

    public DailyActivity(Long id) {
        this.id = id;
    }

    public DailyActivity(Long id, int date_uid, java.util.Date date) {
        this.id = id;
        this.date_uid = date_uid;
        this.date = date;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getDate_uid() {
        return date_uid;
    }

    public void setDate_uid(int date_uid) {
        this.date_uid = date_uid;
    }

    /**
     * Not-null value.
     */
    public java.util.Date getDate() {
        return date;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    // KEEP METHODS - put your custom methods here
    private DateTime mDateTimeBegin;
    private DateTime mDateTimeEnd;
    private Date mDateBegin;
    private Date mDateEnd;

    public DateTime getDateTimeBegin() {
        if (mDateTimeBegin == null) {
            MutableDateTime begin = new MutableDateTime(getDate());
            int hour = 0;
            boolean excepted = true;
            while (excepted) {
                try {
                    begin.setHourOfDay(hour);
                    begin.setMinuteOfHour(0);
                    begin.setSecondOfMinute(0);
                    begin.setMillisOfSecond(0);
                    hour++;
                    excepted = false;
                } catch (Exception e) {

                }
            }
            mDateTimeBegin = begin.toDateTime();
        }
        return mDateTimeBegin;
    }

    public DateTime getDateTimeEnd() {
        if (mDateTimeEnd == null) {
            MutableDateTime end = new MutableDateTime(getDate());
            int hour = 23;
            boolean excepted = true;
            while (excepted) {
                try {
                    end.setHourOfDay(hour);
                    end.setMinuteOfHour(59);
                    end.setSecondOfMinute(59);
                    end.setMillisOfSecond(999);
                    hour--;
                    excepted = false;
                } catch (Exception e) {

                }
            }
            mDateTimeEnd = end.toDateTime();
        }
        return mDateTimeEnd;
    }

    public Date getDateBegin(){
        if(mDateBegin == null){
            mDateBegin = getDateTimeBegin().toDate();
        }
        return mDateBegin;
    }

    public Date getDateEnd(){
        if(mDateEnd == null){
            mDateEnd = getDateTimeBegin().toDate();
        }
        return mDateEnd;
    }

    private List<Activity> mActivities;
    private SparseArray<Activity> mSparseActivities;

    public void loadData() {

    }

    public void onData(List<Activity> activities) {

    }

    public void onData(Activity activity) {
        if (mSparseActivities.get(activity.getUid()) == null) {
            mSparseActivities.put(activity.getUid(), activity);
            mActivities.add(activity);
            eu.codlab.fitit.database.ActivityDao.getInstance().getDao()
                    .insertOrReplace(activity);
        }
    }

    // KEEP METHODS END

}
