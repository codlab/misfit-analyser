package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SLEEP_SESSION_POINT.
 */
public class SleepSessionPoint {

    private Long id;
    private int type;
    private int value;
    private Long parentId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SleepSessionPointDao myDao;

    private SleepSession sleepSession;
    private Long sleepSession__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SleepSessionPoint() {
    }

    public SleepSessionPoint(Long id) {
        this.id = id;
    }

    public SleepSessionPoint(Long id, int type, int value, Long parentId) {
        this.id = id;
        this.type = type;
        this.value = value;
        this.parentId = parentId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSleepSessionPointDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public int getValue() {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }

    public Long getParentId() {
        return parentId;
    }

    public void setParentId(Long parentId) {
        this.parentId = parentId;
    }

    /** To-one relationship, resolved on first access. */
    public SleepSession getSleepSession() {
        Long __key = this.parentId;
        if (sleepSession__resolvedKey == null || !sleepSession__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SleepSessionDao targetDao = daoSession.getSleepSessionDao();
            SleepSession sleepSessionNew = targetDao.load(__key);
            synchronized (this) {
                sleepSession = sleepSessionNew;
            	sleepSession__resolvedKey = __key;
            }
        }
        return sleepSession;
    }

    public void setSleepSession(SleepSession sleepSession) {
        synchronized (this) {
            this.sleepSession = sleepSession;
            parentId = sleepSession == null ? null : sleepSession.getId();
            sleepSession__resolvedKey = parentId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
